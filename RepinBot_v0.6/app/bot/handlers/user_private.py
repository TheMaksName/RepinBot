from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command, StateFilter
from sqlalchemy.ext.asyncio import AsyncSession
from app.bot.FSM.FSM_user_private import RegistrationUser, User_MainStates
from app.bot.handlers.user_edit_profile import user_view_profile_router
from app.bot.handlers.user_registartion import user_registration_router
from app.kbds.inline import get_callback_btns
from app.kbds.reply import get_keyboard
from app.database.orm_query import orm_Get_info_user, orm_get_news_by_id, orm_get_all_news, \
    orm_get_all_themes_by_category_id, orm_get_theme_by_id, orm_Edit_user_profile, orm_get_material_by_id
from app.kbds import reply
from config import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_private_router = Router()
user_private_router.include_router(user_registration_router)
user_private_router.include_router(user_view_profile_router)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cache_current_news = {}
cache_current_theme = {}
cache_current_material = {}

# –ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
@user_private_router.message(Command('menu'))
async def menu(message: Message):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é...", reply_markup=reply.menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–Ω–æ–≤–æ—Å—Ç–∏"
@user_private_router.message(F.text.lower() == '–Ω–æ–≤–æ—Å—Ç–∏')
async def news(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    cache_current_news[user_id] = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
    news = await orm_get_news_by_id(session=session, id=1)  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å

    if news:
        reply_keyboard = get_callback_btns(btns={"–î–∞–ª–µ–µ": 'news_next'})
        if news.image.lower() != '–±–µ–∑ —Ñ–æ—Ç–æ':
            await message.answer_photo(
                news.image,
                caption=f'<strong>{news.text}</strong>',
                parse_mode='HTML',
                reply_markup=reply_keyboard
            )
        else:
            await message.answer(news.text, reply_markup=reply_keyboard)
        await message.answer("–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    else:
        await message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç(((")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏
@user_private_router.callback_query(F.data.startswith('news_'))
async def slide_news(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    action = callback.data.split("_")[1]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (next –∏–ª–∏ back)
    current_news_id = cache_current_news.get(user_id, 1)

    if action == 'next':
        current_news_id += 1
    elif action == 'back':
        current_news_id = max(1, current_news_id - 1)  # –ù–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏

    cache_current_news[user_id] = current_news_id
    news = await orm_get_news_by_id(session=session, id=current_news_id)

    if news:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å
        next_news_exists = await orm_get_news_by_id(session=session, id=current_news_id + 1)
        reply_keyboard = get_callback_btns(
            btns={
                "–ù–∞–∑–∞–¥": 'news_back',
                "–î–∞–ª–µ–µ": 'news_next' if next_news_exists else None,
            }
        )
        await callback.message.edit_media(
            media=InputMediaPhoto(media=news.image, caption=news.text),
            reply_markup=reply_keyboard
        )
    else:
        await callback.answer("–ù–æ–≤–æ—Å—Ç–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–º–∞—Ç–µ—Ä–∏–∞–ª—ã"
@user_private_router.message(StateFilter(User_MainStates.after_registration,User_MainStates.before_registration), F.text.lower() == '–º–∞—Ç–µ—Ä–∏–∞–ª—ã')
async def get_material(message: Message, session: AsyncSession, state: FSMContext):
    user_id = message.from_user.id
    cache_current_material[user_id] = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–º—É
    materials = await orm_get_material_by_id(session=session, material_id=0)

    if materials:

        btns = {f'–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{material.id}': f'choice_material_{material.id}' for material in materials}

        btns.update({"–î–∞–ª–µ–µ": "slide_material_next"})
        reply_markup = get_callback_btns(btns=btns, sizes=(3, 3, 2))

        result_answer = ""
        for material in materials:
            result_answer += f'{material.id}üü¶ {material.title}\n'

        await message.answer(f"–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n\n{result_answer}", reply_markup=reply_markup)
    else:
        await message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


@user_private_router.callback_query(F.data.startswith('slide_material_'))
async def choice_theme(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    action = callback.data.split('_')[2]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (next –∏–ª–∏ back)
    current_category_id = cache_current_material.get(user_id, 1)

    if action == 'next':
        current_category_id += 1
    elif action == 'back':
        current_category_id = max(0, current_category_id - 1)  # –ù–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    cache_current_theme[user_id] = current_category_id
    materials = await orm_get_material_by_id(session=session, material_id=current_category_id)

    if materials:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        next_materials_exists = await orm_get_material_by_id(session=session, material_id=current_category_id + 1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        prev_materials_exists = await orm_get_material_by_id(session=session, material_id=current_category_id - 1)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º

        btns = {f'–ú–∞—Ç–µ—Ä–∏–∞–ª ‚Ññ{material.id}': f'choice_material_{material.id}' for material in materials}


        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if prev_materials_exists:
            btns.update({"–ù–∞–∑–∞–¥": "slide_material_back"})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if next_materials_exists:
            btns.update({"–î–∞–ª–µ–µ": "slide_material_next"})

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = get_callback_btns(btns=btns, sizes=(3, 3, 2))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–∞—Ö
        result_answer = ""
        for material in materials:
            result_answer += f'{material.id}üü¶ {material.title}\n'

        await callback.message.edit_text(f"–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n\n{result_answer}", reply_markup=reply_markup)
    else:
        await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É"
@user_private_router.message(StateFilter(User_MainStates.after_registration,User_MainStates.before_registration), F.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã')
async def get_material(message: Message, session: AsyncSession, state: FSMContext):
    user_id = message.from_user.id
    cache_current_theme[user_id] = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–º—É
    themes = await orm_get_all_themes_by_category_id(session=session, category_id=1)

    if themes:
        if settings.PROD:
            btns = {f'–¢–µ–º–∞ ‚Ññ{theme.id}': f'choice_theme_{theme.id}' for theme in themes}
        else:
            btns = {}
        btns.update({"–î–∞–ª–µ–µ": "slide_theme_next"})
        reply_markup = get_callback_btns(btns=btns, sizes=(3, 3, 2))

        result_answer = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {themes[0].category.title}\n\n"
        for theme in themes:
            result_answer += (f'{theme.id}üü¶ {theme.title}\n'
                             f'üìå–ü—Ä–∏–µ–º: {theme.technique}\n\n')

        await message.answer(f"–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ —Ç–µ–º.\n\n{result_answer}", reply_markup=reply_markup)
    else:
        await message.answer("–¢–µ–º—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
@user_private_router.callback_query(F.data.startswith('slide_theme_'))
async def choice_theme(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    action = callback.data.split('_')[2]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (next –∏–ª–∏ back)
    current_category_id = cache_current_theme.get(user_id, 1)

    if action == 'next':
        current_category_id += 1
    elif action == 'back':
        current_category_id = max(1, current_category_id - 1)  # –ù–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    cache_current_theme[user_id] = current_category_id
    themes = await orm_get_all_themes_by_category_id(session=session, category_id=current_category_id)

    if themes:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        next_category_exists = await orm_get_all_themes_by_category_id(session=session, category_id=current_category_id + 1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        prev_category_exists = await orm_get_all_themes_by_category_id(session=session, category_id=current_category_id - 1)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º
        if settings.PROD:
            btns = {f'–¢–µ–º–∞ ‚Ññ{theme.id}': f'choice_theme_{theme.id}' for theme in themes}
        else:
            btns = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if prev_category_exists:
            btns.update({"–ù–∞–∑–∞–¥": "slide_theme_back"})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if next_category_exists:
            btns.update({"–î–∞–ª–µ–µ": "slide_theme_next"})

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = get_callback_btns(btns=btns, sizes=(3, 3, 2))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–∞—Ö
        result_answer = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {themes[0].category.title}\n\n"
        for theme in themes:
            result_answer += (f'{theme.id}üü¶ {theme.title}'
                             f'üìå–ü—Ä–∏–µ–º: {theme.technique}\n\n')

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await callback.message.edit_text(f"–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ —Ç–µ–º.\n\n{result_answer}", reply_markup=reply_markup)
    else:
        await callback.answer("–¢–µ–º—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

@user_private_router.callback_query(F.data.startswith('choice_theme_'))
async def choice_theme(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    theme_id = int(callback.data.split('_')[2])
    current_theme = await orm_get_theme_by_id(session=session, theme_id=theme_id)

    await state.update_data(prev_message_id=callback.message.message_id)

    reply_markup = get_callback_btns(
        btns={
            "–ü–æ–¥–≤–µ—Ä–∂–¥–∞—é‚úÖ": f"confirm_theme_{theme_id}",
            "–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª‚ùå": "confirm_theme_"
        }
    )

    await callback.message.answer(text=f"–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–µ–º—É:\n\n"
                                       f"üü¶ {current_theme.title}\n"
                                       f"üìå–ü—Ä–∏–µ–º: {current_theme.technique}\n\n"
                                       f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä?",reply_markup=reply_markup)

@user_private_router.callback_query(F.data.startswith("confirm_theme_"))
async def confirm_theme(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    confirm_theme_id = callback.data.split("_")[2]
    if confirm_theme_id:
        user_id = callback.from_user.id
        current_theme = await orm_get_theme_by_id(session=session, theme_id=int(confirm_theme_id))
        data = {'edit_theme': f'{current_theme.title} {current_theme.technique}'}
        await orm_Edit_user_profile(session=session, user_id=user_id, data=data)

        message_ids_to_delete = []
        state_data = await state.get_data()
        prev_message_id = state_data.get("prev_message_id")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message_ids_to_delete.append(callback.message.message_id)
        message_ids_to_delete.append(prev_message_id)

        await callback.bot.delete_messages(callback.message.chat.id, message_ids_to_delete)


        await callback.message.answer("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞üì•")
    else:
        await callback.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@user_private_router.message(User_MainStates.after_registration, F.text.lower() == '–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def get_user_profile(message: Message, session: AsyncSession, state: FSMContext):
    await state.set_state(User_MainStates.user_view_profile)
    data = await orm_Get_info_user(session, message.from_user.id)
    if data:
        result_answer = (f"üìÑ–§–ò–û: {data.name}\n"
                        f"üè´–®–∫–æ–ª–∞: {data.school}\n"
                        f"üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.phone_number}\n"
                        f"üìß–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {data.mail}\n"
                        f"üë®‚Äçüè´–§–ò–û –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.name_mentor}\n"
                        f"üë™–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data.post_mentor if data.post_mentor else ''}\n"
                        f"üìú–¢–µ–º–∞: {data.theme}")

        reply_markup = get_keyboard(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            "–ù–∞–∑–∞–¥",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            sizes=(2,),
        )
        await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
        await message.answer(result_answer, reply_markup=reply_markup)
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
@user_private_router.message(User_MainStates.before_registration)
async def process_action(message: Message, state: FSMContext):
    if message.text.lower() == '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)))", reply_markup=reply.del_kbd)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)')
        await state.set_state(RegistrationUser.name_user)




# @user_private_router.message(Command('admin'))
# async def admin(message: Message, session: AsyncSession, state: FSMContext):
#     list_admins = list(await orm_get_list_admin(session=session))
#     print(list_admins)
#     if message.from_user.username == settings.USER_ADMIN_NICK or message.from_user.id in list_admins:
#         reply_markup = admin_kb
#         if message.from_user.id not in list_admins:
#             await orm_add_admin(session=session, user_id=message.from_user.id, username=message.from_user.username)
#         if message.from_user.username == settings.USER_ADMIN_NICK:
#             reply_markup = admin_kb
#             reply_markup.keyboard[1].append(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
#         await message.answer(text="–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω", reply_markup=reply_markup)
#         await state.set_state(Admin_MainStates.choice_action)
#     else:
#         await message.answer(text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


