from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message


from sqlalchemy.ext.asyncio import AsyncSession


from app.bot.FSM.FSM_user_private import RegistrationUser, User_MainStates
from app.bot.common.validation import validate_fio, validate_phone_number, validate_email_format
from app.bot.common.verif_mail import start_verify_mail, \
    check_verify_code
from app.kbds import reply
from app.kbds.inline import role_inline_kb
from app.database.orm_query import orm_Change_RegStaus, orm_AddActiveUser

user_registration_router = Router()

#–ö–æ–¥ –Ω–∏–∂–µ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
@user_registration_router.message(RegistrationUser.name_user)
async def register_step_name(message: Message, state: FSMContext):
    if validate_fio(message.text.strip()):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —à–∫–æ–ª—ã')
        await state.update_data(name_user=message.text)
        await state.set_state(RegistrationUser.school)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ).")

@user_registration_router.message(RegistrationUser.school)
async def register_step_phone_number(message: Message, state: FSMContext):

    await state.update_data(school=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.')
    await state.set_state(RegistrationUser.phone_number)


@user_registration_router.message(RegistrationUser.phone_number, F.text)
async def register_step_mail(message: Message, state: FSMContext):
    phone_number = message.text
    if validate_phone_number(phone_number):
        await state.update_data(phone_number=message.text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –í–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã')
        await state.set_state(RegistrationUser.mail)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.")


@user_registration_router.message(RegistrationUser.mail, F.text)
async def register_step_name_mentor(message: Message, state: FSMContext):
    try:
        if validate_email_format(email=message.text):
            await state.update_data(mail=message.text)
            await start_verify_mail(message.text, message.from_user.id)
            await state.set_state(RegistrationUser.verify_mail)
            await message.answer(text="–ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥")
        else:
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    except Exception as e:
        pass


@user_registration_router.message(RegistrationUser.verify_mail, F.text)
async def register_step_verify_mail(message: Message, state: FSMContext):
    if check_verify_code(message.text, message.from_user.id):
        await message.answer(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ")
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –í–∞—à–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)')
        await state.set_state(RegistrationUser.name_mentor)
    else:
        await message.answer(text="–í–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@user_registration_router.message(RegistrationUser.name_mentor, F.text)
async def register_step_status_mentor(message: Message, state: FSMContext):
    name_mentor = message.text
    if validate_fio(name_mentor):
        await state.update_data(name_mentor=message.text)
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.',
        reply_markup=role_inline_kb)
        await state.set_state(RegistrationUser.status_mentor)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ).")

@user_registration_router.message(RegistrationUser.input_status_mentor)
async def register_input_status_mentor(message: Message, state: FSMContext, session:AsyncSession):
    await state.update_data(post_mentor=message.text)
    await register_step_finish(message=message, state=state, session=session)

@user_registration_router.message(RegistrationUser.post_mentor)
async def register_input_post_mentor(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(post_mentor=message.text)
    await register_step_finish(message=message, state=state, session=session)

# @user_private_router.message(AddUser.input_status_mentor)
# @user_private_router.message(AddUser.post_mentor)
async def register_step_finish(message: Message, state: FSMContext, session: AsyncSession, user_id: int = None):
    try:
        if user_id:
            await state.update_data(user_id=user_id)
            await orm_Change_RegStaus(session, user_id, True)
        else:
            await state.update_data(user_id=message.from_user.id)
            await orm_Change_RegStaus(session, message.from_user.id, True)
        data = await state.get_data()
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞.')
        await message.answer("""
üì¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–Ω–∫—É—Ä—Å–∞ ¬´–†–ï–ü–ò–ù –ù–ê–®!¬ª
üîπ –ü–æ—á–µ–º—É –≤—ã –∑–¥–µ—Å—å?
–¢—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Å–ª—ã—à–∞–ª –ø—Ä–æ –ò–ª—å—é –†–µ–ø–∏–Ω–∞ ‚Äî –≤–µ–ª–∏–∫–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞, –∞–≤—Ç–æ—Ä–∞ ¬´–ë—É—Ä–ª–∞–∫–æ–≤ –Ω–∞ –í–æ–ª–≥–µ¬ª. –ù–æ –≤–æ—Ç —Å—Ç—Ä–∞–Ω–Ω–æ—Å—Ç—å: –≤ —Ñ–∏–Ω—Å–∫–æ–º –º—É–∑–µ–µ ¬´–ê—Ç–µ–Ω–µ—É–º¬ª –≤–¥—Ä—É–≥ —Ä–µ—à–∏–ª–∏, —á—Ç–æ –†–µ–ø–∏–Ω ‚Äî –Ω–µ —Ä—É—Å—Å–∫–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫, –∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π. –ö–∞–∫ —Ç–∞–∫? –í–µ–¥—å –æ–Ω —Å–∞–º –ø–∏—Å–∞–ª, —á—Ç–æ –µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∞ —Ä—É—Å—Å–∫–∞—è –í–æ–ª–≥–∞, —á—Ç–æ –æ–Ω —É–≤–∏–¥–µ–ª –≤ –±—É—Ä–ª–∞–∫–∞—Ö —Å–∏–ª—É –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞—Ä–æ–¥–∞!
–ß—Ç–æ –º—ã –±—É–¥–µ–º —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å? –û—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç–æ–π: –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –†–µ–ø–∏–Ω ‚Äì –Ω–∞—à!
üîπ –ó–∞—á–µ–º —ç—Ç–æ—Ç –∫–æ–Ω–∫—É—Ä—Å?
–ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å, –∞ –¥–æ–∫–∞–∂–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–∞–≤–¥—É —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ. –¢—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤—ã—Å—Ç–∞–≤–∫—É, –≥–¥–µ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –æ –†–µ–ø–∏–Ω–µ –∏ –µ–≥–æ —Å–≤—è–∑–∏ —Å –°–∞–º–∞—Ä–æ–π, –í–æ–ª–≥–æ–π, –±—É—Ä–ª–∞–∫–∞–º–∏, —Ä—É—Å—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π. –≠—Ç–æ —Ç–≤–æ–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!
üîπ –¢—ã —Ç–æ—á–Ω–æ —Å–ø—Ä–∞–≤–∏—à—å—Å—è!
–ú—ã –≤–µ—Ä–∏–º –≤ —Ç–µ–±—è! –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤—Å—ë, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç:
‚úÖ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ ‚Äì –ª—É—á—à–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç –∏ –ø–æ–¥—Å–∫–∞–∂—É—Ç.
‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äì –≤—Å—è –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –†–µ–ø–∏–Ω–µ, –°–∞–º–∞—Ä–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ.
‚úÖ –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äì –º—ã –±—É–¥–µ–º –≤–µ—Å—Ç–∏ —Ç–µ–±—è –æ—Ç –≤—ã–±–æ—Ä–∞ –∏–¥–µ–∏ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Å—Ç–∞–≤–∫–∏.
‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ‚Äì —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
üîπ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?
üí° –ü—Ä–æ—á–∏—Ç–∞–π —É—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞.
üí° –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ç–µ–º—É ‚Äì —Ç–µ–±—è –∂–¥—ë—Ç 30 –∏–¥–µ–π!
üí° –°–ª–µ–¥–∏ –∑–∞ –Ω–∞—à–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏ ‚Äì –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤—ã—Å—Ç–∞–≤–∫—É —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.
üì¢ –†–µ–ø–∏–Ω –Ω–∞—à! –°–∞–º–∞—Ä–∞ ‚Äì –µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! –ê —Ç—ã ‚Äì —Ç–æ—Ç, –∫—Ç–æ –ø–æ–∫–∞–∂–µ—Ç —ç—Ç–æ –º–∏—Ä—É! üöÄ
""")
        await orm_AddActiveUser(session, data)
        result_answer = (f"üìÑ–§–ò–û: {data['name_user']}\n"
                         f"üè´–®–∫–æ–ª–∞: {data['school']}\n"
                         f"üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone_number']}\n"
                         f"üìß—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {data['mail']}\n"
                         f"üë®‚Äçüè´–§–ò–û –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {data['name_mentor']}\n"
                         f"{"üë™–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: " + data['post_mentor'] if data['post_mentor'] else ''}")

        await message.answer(result_answer)
        await message.answer('–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é...', reply_markup=reply.menu_kb)
        await state.set_state(User_MainStates.after_registration)
        await state.set_data({})

    except Exception as e:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–Ω–ª–∞–π–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_registration_router.callback_query(RegistrationUser.status_mentor)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext, session:AsyncSession):
    role = callback_query.data.split('_')[1]
    await callback_query.answer()
    if role == 'teacher':
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.')
        await state.set_state(RegistrationUser.post_mentor)
    elif role == 'other':
        await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.')
        await state.set_state(RegistrationUser.input_status_mentor)
    else:
        await state.update_data(post_mentor='–†–æ–¥–∏—Ç–µ–ª—å/–æ–ø–µ–∫—É–Ω')
        await register_step_finish(message=callback_query.message, state=state, session=session, user_id=callback_query.from_user.id)
